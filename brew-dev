#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
require "json"

# Print help if no arguments given
ARGV << "-h" if ARGV.empty?

# Get user
user = ENV["HOMEBREW_GITHUB_USER"] || ENV["USER"]

# Define safe system method, will exit with code 1 if command wasn't successful
def safe_system(*cmd)
  exit 1 unless system(*cmd)
end

# Parse options
parser = OptionParser.new
parser.on("--rebase FORMULA", "checkout to 'bottle-' branch and rebase") do |formula|
  safe_system("git", "checkout", "bottle-#{formula}")
  safe_system("git", "rebase", "master")
end
parser.on("--fix FORMULA", "checkout to 'bottle-' branch, delete top comment and edit formula") do |formula|
  safe_system("git", "checkout", "bottle-#{formula}")
  safe_system("sed", "-i", "/# .*: Build a bottle for .*brew/d", "Formula/#{formula}.rb")
  safe_system("brew", "edit", formula)
end
parser.on("--setup", "setup homebrew-core repo for development") do
  dir = `brew --repository homebrew/core`
  remotes = {
    "#{user}"  =>  "git@github.com:#{user}/linuxbrew-core.git",
    "origin"   => "git@github.com:Homebrew/linuxbrew-core.git",
    "homebrew" => "https://github.com/Homebrew/homebrew-core.git",
  }
  taps = %w[
    homebrew/linux-dev
    homebrew/livecheck
    dawidd6/autoremove
  ]

  # Tap
  taps.each do |tap|
    safe_system("brew", "tap", tap)
  end

  # Ensure we are in proper repo
  Dir.chdir(dir.chomp)

  # Unshallow repo if not done already
  if File.exist?(".git/shallow")
    puts "==> git fetch --unshallow"
    safe_system("git", "fetch", "--unshallow")
  end

  # Add remotes or set-urls
  remotes.each do |name, url|
    name_exist = false
    url_exist = false

    `git remote`.each_line do |line|
      name_exist = true if line.chomp == name
    end

    if name_exist && `git remote get-url #{name}`.chomp == url
      url_exist = true
    end

    next if name_exist && url_exist

    operation = "set-url" if name_exist && !url_exist
    operation = "add" unless name_exist

    puts "==> git remote #{operation} #{name} #{url}"
    safe_system("git", "remote", operation, name, url)
  end
end
parser.on("--sync", "pull origin master and push to #{user} master") do
  # Ensure we are on master
  safe_system("git", "checkout", "master", :out => File::NULL)
  # Pull origin
  safe_system("git", "pull", "origin", "master")
  # Push user
  safe_system("git", "push", user, "master")
end
parser.on("--fetch", "fetch latest master of homebrew-core") do
  safe_system("git", "fetch", "homebrew")
  safe_system("git", "fetch", user)
end
parser.on("--compare", "compare fetched upstream homebrew-core master with linuxbrew-core master") do
  safe_system("git", "log", "--oneline", "master..homebrew/master")
end
parser.on("--merge [SHA]", "merge upstream homebrew-core to linuxbrew-core") do |sha|
  # Ensure we are on master
  safe_system("git", "checkout", "master", :out => File::NULL)
  if sha.nil?
    safe_system("brew", "merge-homebrew", "--core", "--skip-style")
  else
    safe_system("brew", "merge-homebrew", "--core", "--skip-style", sha)
  end
end
parser.on("--bottle [FORMULAE]", "if no arguments given, find formulae to bottle") do |formulae|
  # Split argument safely
  formulae = formulae&.split(",")
  # If no argument given, find formulae to bottle
  if formulae.nil?
    formulae = []
    `brew find-formulae-to-bottle`.each_line do |line|
      formulae << line.chomp
    end
  end
  # Print
  formulae.each do |formula|
    puts formula
  end
  # Exit if no arguments
  exit if formulae.empty?
  # Wait
  print "==> Proceed?"
  readline
  # Ensure we are on master
  safe_system("git", "checkout", "master", :out => File::NULL)
  # Create PRs
  formulae.each do |formula|
    safe_system("brew", "build-bottle-pr", "--force", "--remote=#{user}", formula)
  end
end
parser.on("--container", "launch bash shell in Docker container with brew in it") do
  dir = `brew --repository homebrew/core`.chomp
  image = "homebrew/brew:latest"
  safe_system("docker", "run", "-it", "--rm", "-v", "#{dir}:#{dir}:ro", "-e", "HOMEBREW_DEVELOPER=1", "-e", "HOMEBREW_NO_AUTO_UPDATE=1", "-e", "HOMEBREW_NO_INSTALL_CLEANUP=1", image)
end
parser.on("--pull [PR_NUMBERS]", "pull bottles for given comma separated PR numbers (squashed if needed), if no arguments, then pull those whose PRs are labeled 'good' and 'bottle'") do |pr_numbers|
  # Split argument safely or set to empty array if nil
  pr_numbers = pr_numbers&.split(",") || []
  # Define hash
  pr_numbers_and_titles = {}
  # If no argument given, get PRs which are labeled 'bottle' and 'good'
  if pr_numbers.empty?
    pulls = JSON.parse(`hub api /repos/homebrew/linuxbrew-core/pulls`)
    pulls.each do |pull|
      bottle = false
      good = false
      pull["labels"].each do |label|
        bottle = true if label["name"] == "bottle"
        good = true if label["name"] == "good"
      end
      pr_numbers_and_titles[pull["number"]] = pull["title"] if bottle && good
    end
  else
    pr_numbers.each do |pr_number|
      pull = JSON.parse(`hub api /repos/homebrew/linuxbrew-core/pulls/#{pr_number}`)
      pr_numbers_and_titles[pull["number"]] = pull["title"]
    end
  end
  # Print
  pr_numbers_and_titles.each do |pr_number, pr_title|
    puts "##{pr_number} \"#{pr_title}\""
  end
  # Exit if no arguments
  exit if pr_numbers_and_titles.empty?
  # Wait
  print "==> Proceed?"
  readline
  # Ensure we are on master
  safe_system("git", "checkout", "master", :out => File::NULL)
  # Pull bottles and squash if necessary
  pr_numbers_and_titles.each do |pr_number, _|
    safe_system("brew", "pull", "--bottle", "--bintray-org=linuxbrew", "--test-bot-user=LinuxbrewTestBot", pr_number.to_s)
    safe_system("brew", "squash-bottle-pr")
  end
end
parser.parse!
